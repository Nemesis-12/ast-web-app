// Implementation file for parser generated by fsyacc
module Par
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser\Par.fsy"

open Absyn

# 10 "Parser\Par.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LET
  | IN
  | END
  | FUN
  | IF
  | THEN
  | ELSE
  | ARROW
  | AND
  | OR
  | EQ
  | LT
  | GT
  | PLUS
  | MINUS
  | TIMES
  | NAME of (string)
  | CSTBOOL of (bool)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_END
    | TOKEN_FUN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_ARROW
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_NAME
    | TOKEN_CSTBOOL
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LET  -> 3 
  | IN  -> 4 
  | END  -> 5 
  | FUN  -> 6 
  | IF  -> 7 
  | THEN  -> 8 
  | ELSE  -> 9 
  | ARROW  -> 10 
  | AND  -> 11 
  | OR  -> 12 
  | EQ  -> 13 
  | LT  -> 14 
  | GT  -> 15 
  | PLUS  -> 16 
  | MINUS  -> 17 
  | TIMES  -> 18 
  | NAME _ -> 19 
  | CSTBOOL _ -> 20 
  | CSTINT _ -> 21 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LET 
  | 4 -> TOKEN_IN 
  | 5 -> TOKEN_END 
  | 6 -> TOKEN_FUN 
  | 7 -> TOKEN_IF 
  | 8 -> TOKEN_THEN 
  | 9 -> TOKEN_ELSE 
  | 10 -> TOKEN_ARROW 
  | 11 -> TOKEN_AND 
  | 12 -> TOKEN_OR 
  | 13 -> TOKEN_EQ 
  | 14 -> TOKEN_LT 
  | 15 -> TOKEN_GT 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_MINUS 
  | 18 -> TOKEN_TIMES 
  | 19 -> TOKEN_NAME 
  | 20 -> TOKEN_CSTBOOL 
  | 21 -> TOKEN_CSTINT 
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24 
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | END  -> "END" 
  | FUN  -> "FUN" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | ARROW  -> "ARROW" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | NAME _ -> "NAME" 
  | CSTBOOL _ -> "CSTBOOL" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;37us;65535us;0us;2us;2us;33us;7us;8us;8us;33us;12us;13us;13us;33us;14us;15us;15us;33us;18us;19us;19us;33us;20us;21us;21us;33us;23us;24us;24us;33us;25us;26us;26us;33us;27us;28us;28us;33us;31us;32us;32us;33us;33us;33us;34us;33us;35us;33us;36us;33us;37us;33us;38us;33us;39us;33us;40us;33us;41us;33us;42us;34us;43us;35us;44us;36us;45us;37us;46us;38us;47us;39us;48us;40us;49us;41us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;10us;1us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;1us;1us;2us;1us;3us;1us;4us;1us;5us;10us;5us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;5us;2us;6us;7us;2us;6us;7us;1us;6us;10us;6us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;6us;10us;6us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;6us;1us;7us;1us;7us;10us;7us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;7us;10us;7us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;7us;1us;8us;10us;8us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;8us;10us;8us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;8us;10us;8us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;9us;1us;9us;1us;9us;10us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;10us;10us;10us;11us;12us;13us;14us;15us;16us;17us;18us;10us;10us;11us;11us;12us;13us;14us;15us;16us;17us;18us;10us;10us;11us;12us;12us;13us;14us;15us;16us;17us;18us;10us;10us;11us;12us;13us;13us;14us;15us;16us;17us;18us;10us;10us;11us;12us;13us;14us;14us;15us;16us;17us;18us;10us;10us;11us;12us;13us;14us;15us;15us;16us;17us;18us;10us;10us;11us;12us;13us;14us;15us;16us;16us;17us;18us;10us;10us;11us;12us;13us;14us;15us;16us;17us;17us;18us;10us;10us;11us;12us;13us;14us;15us;16us;17us;18us;18us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;15us;17us;19us;21us;23us;25us;36us;38us;41us;44us;46us;57us;59us;70us;72us;74us;76us;87us;89us;100us;102us;104us;115us;117us;128us;130us;141us;143us;145us;147us;158us;169us;180us;191us;202us;213us;224us;235us;246us;257us;259us;261us;263us;265us;267us;269us;271us;|]
let _fsyacc_action_rows = 50
let _fsyacc_actionTableElements = [|7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;0us;49152us;16us;32768us;0us;3us;1us;7us;3us;10us;6us;29us;7us;23us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;0us;16385us;0us;16386us;0us;16387us;0us;16388us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;16us;32768us;1us;7us;2us;9us;3us;10us;6us;29us;7us;23us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;0us;16389us;1us;32768us;19us;11us;2us;32768us;13us;12us;19us;17us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;16us;32768us;1us;7us;3us;10us;4us;14us;6us;29us;7us;23us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;16us;32768us;1us;7us;3us;10us;5us;16us;6us;29us;7us;23us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;0us;16390us;1us;32768us;13us;18us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;16us;32768us;1us;7us;3us;10us;4us;20us;6us;29us;7us;23us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;16us;32768us;1us;7us;3us;10us;5us;22us;6us;29us;7us;23us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;0us;16391us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;16us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;8us;25us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;16us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;9us;27us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;7us;16392us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;1us;32768us;19us;30us;1us;32768us;10us;31us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;15us;16393us;1us;7us;3us;10us;6us;29us;7us;23us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;15us;16394us;1us;7us;3us;10us;6us;29us;7us;23us;11us;48us;12us;49us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;8us;16395us;1us;7us;3us;10us;6us;29us;7us;23us;18us;44us;19us;4us;20us;6us;21us;5us;8us;16396us;1us;7us;3us;10us;6us;29us;7us;23us;18us;44us;19us;4us;20us;6us;21us;5us;7us;16397us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;10us;16398us;1us;7us;3us;10us;6us;29us;7us;23us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;10us;16399us;1us;7us;3us;10us;6us;29us;7us;23us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;10us;16400us;1us;7us;3us;10us;6us;29us;7us;23us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;13us;16401us;1us;7us;3us;10us;6us;29us;7us;23us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;14us;16402us;1us;7us;3us;10us;6us;29us;7us;23us;11us;48us;13us;45us;14us;46us;15us;47us;16us;42us;17us;43us;18us;44us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;7us;32768us;1us;7us;3us;10us;6us;29us;7us;23us;19us;4us;20us;6us;21us;5us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;26us;27us;28us;29us;30us;38us;55us;56us;58us;61us;69us;86us;94us;111us;112us;114us;122us;139us;147us;164us;165us;173us;190us;198us;215us;223us;231us;233us;235us;243us;259us;275us;284us;293us;301us;312us;323us;334us;348us;363us;371us;379us;387us;395us;403us;411us;419us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;1us;1us;3us;7us;8us;6us;4us;2us;3us;3us;3us;3us;3us;3us;3us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16386us;16387us;16388us;65535us;65535us;16389us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;65535us;65535us;65535us;65535us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;|]
let _fsyacc_reductions = lazy [|
# 211 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 220 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser\Par.fsy"
                                                            _1 
                   )
# 31 "Parser\Par.fsy"
                 : Absyn.expr));
# 231 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser\Par.fsy"
                                                            Var _1 
                   )
# 34 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 242 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser\Par.fsy"
                                                            CstI _1 
                   )
# 35 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 253 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser\Par.fsy"
                                                            CstB _1 
                   )
# 36 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 264 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser\Par.fsy"
                                                            _2 
                   )
# 37 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 275 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser\Par.fsy"
                                                            Let(_2, _4, _6) 
                   )
# 38 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 288 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser\Par.fsy"
                                                             Let(_2, Fun(_3, _5), _7) 
                   )
# 39 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 302 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_Expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser\Par.fsy"
                                                            If(_2, _4, _6) 
                   )
# 40 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 315 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser\Par.fsy"
                                                            Fun(_2, _4) 
                   )
# 41 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 327 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser\Par.fsy"
                                                            App(_1, _2) 
                   )
# 42 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 339 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser\Par.fsy"
                                                            Prim("+", _1, _3) 
                   )
# 43 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 351 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser\Par.fsy"
                                                            Prim("-", _1, _3) 
                   )
# 44 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 363 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser\Par.fsy"
                                                            Prim("*", _1, _3) 
                   )
# 45 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 375 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser\Par.fsy"
                                                            Prim("=", _1, _3) 
                   )
# 46 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 387 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser\Par.fsy"
                                                            Prim("<", _1, _3) 
                   )
# 47 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 399 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser\Par.fsy"
                                                            Prim(">", _1, _3) 
                   )
# 48 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 411 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser\Par.fsy"
                                                            Prim("&&", _1, _3) 
                   )
# 49 "Parser\Par.fsy"
                 : 'gentype_Expr));
# 423 "Parser\Par.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser\Par.fsy"
                                                            Prim("||", _1, _3) 
                   )
# 50 "Parser\Par.fsy"
                 : 'gentype_Expr));
|]
# 436 "Parser\Par.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 25;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    engine lexer lexbuf 0 :?> _

%{
open Absyn
%}

%token <int> CSTINT
%token <bool> CSTBOOL
%token <string> NAME
%token PLUS MINUS TIMES
%token EQ LT GT
%token AND OR
%token ARROW
%token IF THEN ELSE
%token FUN
%token LET IN END
%token LPAR RPAR
%token EOF

%left OR
%left AND
%left EQ LT GT
%left PLUS MINUS
%left TIMES
%nonassoc ELSE

%start Main
%type <Absyn.expr> Main

%%

Main:
    Expr EOF                         { $1 }

Expr:
    NAME                             { Var $1 }
  | CSTINT                           { CstI $1 }
  | CSTBOOL                          { CstB $1 }
  | LPAR Expr RPAR                   { $2 }
  | LET NAME EQ Expr IN Expr END     { Let($2, $4, $6) }
  | IF Expr THEN Expr ELSE Expr      { If($2, $4, $6) }
  | FUN NAME ARROW Expr              { Fun($2, $4) }
  | Expr Expr                        { App($1, $2) }
  | Expr PLUS Expr                   { Prim("+", $1, $3) }
  | Expr MINUS Expr                  { Prim("-", $1, $3) }
  | Expr TIMES Expr                  { Prim("*", $1, $3) }
  | Expr EQ Expr                     { Prim("=", $1, $3) }
  | Expr LT Expr                     { Prim("<", $1, $3) }
  | Expr GT Expr                     { Prim(">", $1, $3) }
  | Expr AND Expr                    { Prim("&&", $1, $3) }
  | Expr OR Expr                     { Prim("||", $1, $3) }
;
